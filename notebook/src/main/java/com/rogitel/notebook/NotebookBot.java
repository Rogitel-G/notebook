package com.rogitel.notebook;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;

// –¥–∞–Ω–Ω–∞—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è —É–±–∏—Ä–∞–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ deprecated –º–µ—Ç–æ–¥–æ–≤
@SuppressWarnings("deprecation")
// –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –≤ Spring
@Component
public class NotebookBot extends TelegramLongPollingBot {

    // –ª–æ–≥–≥–µ—Ä –æ–±—ä–µ–∫—Ç, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –º—ã –±—É–¥–µ–º –ø–∏—Å–∞—Ç—å –ª–æ–≥–∏
    private static final Logger log = LoggerFactory.getLogger(NotebookBot.class);

    // id –Ω–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Telegram
    private final Long myId = 1436375463L;

    // –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ —Ñ–∞–π–ª–≤ –Ω–µ—Ç, —Ç–æ –±—É–¥–µ—Ç
    // —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
    String path = new String("notebook.txt");
    File file = new File(path);
    Date date;

    // –º–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    @Override
    public void onUpdateReceived(Update update) {

        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ, –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º id –∞–¥—Ä–µ—Å–∞—Ç–∞ —Å myId
        if (update.hasMessage() && update.getMessage().hasText()) {
            log.info("We received a new message");
            if (update.getMessage().getChat().getId().equals(myId)) {
                log.info("Correct ChatId == myId");

                // —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                answerSender(update.getMessage().getChatId(), workWithFile(update.getMessage().getText()));

            } else {
                // –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ —Å –¥—Ä—É–≥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ —Ä–∞–≤–Ω–æ–≥–æ myId
                log.info("Incorrect ChatId != myId");
                answerSender(update.getMessage().getChatId(), "–≠—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –±–æ—Ç...");
            }
        }

    }

    // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –±–æ—Ç–∞, —ç—Ç–æ—Ç –∏ –Ω–∏–∂–µ –º–µ—Ç–æ–¥—ã —Å–ª—É–∂–µ–±–Ω—ã–µ, –±–µ–∑ –Ω–∏—Ö —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥–µ—Ç
    @Override
    public String getBotUsername() {
        return "NotebookReallyTestBot";
    }

    // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    @Override
    public String getBotToken() {
        return "7943334136:AAEoUJN4VWCKpyeuyWCYBEt9aGwJezeoNlM";
    }

    // –º–µ—Ç–æ–¥ —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º
    public String workWithFile(String message) {
        if (file.exists() && !file.isDirectory()) {
            writer(message);
            log.info("File exist " + path);
        } else {
            writer(message);
            log.info("Create new file " + path);
        }

        return "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª!";
    }

    // –º–µ—Ç–æ–¥ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
    public void writer(String message) {

        FileWriter writer;
        try {
            // —Å–æ–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å
            // —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
            date = new Date();
            writer = new FileWriter(path, true);
            writer.write(date.toString());
            writer.write("\n");
            writer.write(message);
            writer.write("\n\n");
            writer.close();
            log.info("The message has been saved to a file");
        } catch (IOException e) {
            e.printStackTrace();
        }

    }
    
    //–º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    public void answerSender(Long chatId, String answer) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(answer);
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    @PostConstruct
    public void startingMessage() {
        LocalDateTime currentDateTime = java.time.LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String answer = "üü© –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—Å—Ç–∏–¥–∞—Å—å " + currentDateTime.format(formatter).toString();
        answerSender(myId, answer);

    }

    // —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã
    @PreDestroy
    public void finalMessage() throws ClassNotFoundException, SQLException {
        LocalDateTime currentDateTime = java.time.LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String answer = "üü• –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å " + currentDateTime.format(formatter).toString();
        answerSender(myId, answer);

    }

}
